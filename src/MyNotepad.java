
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.event.TextEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author lakshay
 */
public class MyNotepad extends javax.swing.JFrame {
    String programName = "Notepad";
    String fileName = "";
    String holdText;
    String fn;
    String dir;
    boolean textChanged = false;
    String Filename;
    Clipboard clip = getToolkit().getSystemClipboard();
    
    

    /**
     * Creates new form MyNotepad
     */
    public MyNotepad() {
        initComponents();
    }
    public void checkFile(){
        BufferedReader read;
        StringBuffer sb = new StringBuffer();
        try{
            read = new BufferedReader(new FileReader(fileName));
            String line;
            while((line = read.readLine()) !=null)
            {
                sb.append(line + "\n");
            }
            textArea.setText(sb.toString());
            read.close();
        } catch (FileNotFoundException e)
        {
            System.out.println("File not found");
        } 
        catch(IOException ioe) {
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogColor = new javax.swing.JDialog();
        colorChooser = new javax.swing.JColorChooser();
        textArea = new java.awt.TextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        saveasMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        About = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        colorMenu = new javax.swing.JMenuItem();

        javax.swing.GroupLayout dialogColorLayout = new javax.swing.GroupLayout(dialogColor.getContentPane());
        dialogColor.getContentPane().setLayout(dialogColorLayout);
        dialogColorLayout.setHorizontalGroup(
            dialogColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogColorLayout.createSequentialGroup()
                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 45, Short.MAX_VALUE))
        );
        dialogColorLayout.setVerticalGroup(
            dialogColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogColorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MyNotepad By Lakshay BCA22");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        textArea.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        textArea.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                textAreaTextValueChanged(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(204, 204, 255));

        jMenu1.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        jMenu1.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenu);

        saveasMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveasMenu.setText("Save As");
        saveasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveasMenu);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenu);

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        jMenu1.add(About);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        colorMenu.setText("Text Color");
        colorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuActionPerformed(evt);
            }
        });
        jMenu2.add(colorMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
     if(textArea.getText().length()<1){
     FileDialog fd =new FileDialog(this, "Choose File", FileDialog.LOAD);
     fd.show();
     if(fd.getFile() !=null)
     {
      fileName = fd.getDirectory() + fd.getFile();
      setTitle(fileName);
      checkFile();
      
     }
     textArea.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_openMenuActionPerformed
     else if(!textChanged){
         FileDialog fd =new FileDialog(this, "Choose File", FileDialog.LOAD);
     fd.show();
     if(fd.getFile() !=null)
     {
      fileName = fd.getDirectory() + fd.getFile();
      setTitle(fileName);
      checkFile();
     }
     textArea.requestFocus();
     }
     else{
         int confirm = JOptionPane.showConfirmDialog(null,"Do you want to save before exiting this program");
        if (confirm==JOptionPane.YES_OPTION)
        {
         if("".equals(fileName)){
             saveAs();
             }
         else{
             save(fileName);
         }
         FileDialog fd =new FileDialog(this, "Choose File", FileDialog.LOAD);
         fd.show();
         if(fd.getFile() !=null)
         {
         fileName = fd.getDirectory() + fd.getFile();
         setTitle(fileName);
         checkFile();
     }
         
        textArea.requestFocus(); 
     }
    }
    }
    private void saveasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasMenuActionPerformed
        saveAs();   
// TODO add your handling code here:
    }//GEN-LAST:event_saveasMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
     // TODO add your handling code here:
     if(fileName.equals(""))
         saveAs();
     else
         save(fileName);
    }//GEN-LAST:event_saveMenuActionPerformed

    private void textAreaTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_textAreaTextValueChanged
     if(TextEvent.TEXT_VALUE_CHANGED!=0)
     {
         if(!textChanged)
              setTitle("* "+getTitle());
         textChanged=true;
         saveMenu.setEnabled(true);
     }
        // TODO add your handling code here:
    }//GEN-LAST:event_textAreaTextValueChanged

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        newFile();
        // TODO add your handling code here:
    }//GEN-LAST:event_newMenuActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
    JOptionPane.showMessageDialog(About,"Ver : 1.0\n"
            + "Language : Java\n"
            + "Developer : Lakshay Kumar");
        // TODO add your handling code here:
    }//GEN-LAST:event_AboutActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
    if("".equals(textArea.getText())){
     System.exit(0);
    }
    else if(!textChanged){
        System.exit(0);
    }
    else{
        int confirm = JOptionPane.showConfirmDialog(this,"Do you want to save exiting this program");
        if(confirm==JOptionPane.YES_OPTION){
            if(fileName.equals(""))
                saveAs();
            else
                save(fileName);
        }
        if(confirm==JOptionPane.NO_OPTION)
        {
            System.exit(0);
        }
    
        // TODO add your handling code here:
    }//GEN-LAST:event_exitMenuActionPerformed
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
     if("".equals(textArea.getText())){
     System.exit(0);
    }
    else if(!textChanged){
        System.exit(0);
    }
    else{
        int confirm = JOptionPane.showConfirmDialog(this,"Do you want to save exiting this program");
        if(confirm==JOptionPane.YES_OPTION){
            if(fileName.equals(""))
                saveAs();
            else
                save(fileName);
        }
        if(confirm==JOptionPane.NO_OPTION)
        {
            System.exit(0);
        }
    
        // TODO add your handling code here:
    }  
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void colorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuActionPerformed
    Color c= colorChooser.showDialog(null,"Color Dialog",null);
    textArea.setForeground(c);    // TODO add your handling code here:
    }//GEN-LAST:event_colorMenuActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyNotepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JMenuItem colorMenu;
    private javax.swing.JDialog dialogColor;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenuItem saveasMenu;
    private java.awt.TextArea textArea;
    // End of variables declaration//GEN-END:variables

    private void saveAs() {
        FileDialog fd = new FileDialog(MyNotepad.this, "Save", FileDialog.SAVE);
        fd.show();
        if(fd.getFile() != null) {
            fn=fd.getFile();
            dir=fd.getDirectory();
            fileName=dir + fn + ".txt";
            setTitle(fileName);
            try
            {
                DataOutputStream d = new DataOutputStream(new FileOutputStream(fileName));
                holdText= textArea.getText();
                BufferedReader br = new BufferedReader(new StringReader(holdText));
                while((holdText = br.readLine()) !=null)
                {
                  d.writeBytes(holdText + "\r\n");
                  d.close();
                  
                }
            }
            catch (Exception e)
            {
                System.out.println("File not found");
            }
            textArea.requestFocus();
            save(fileName);
        }
    }

    private void save(String fileName) {
        setTitle(programName+" "+fileName);
        try
        {
            FileWriter out;
            out=new FileWriter(fn);
            out.write(textArea.getText());
            out.close();
        }
        catch(Exception err)
        {
            System.out.println("Error: " + err);
            
        }
        textChanged=false;
        saveMenu.setEnabled(false);
    }

    private void newFile() {
    if(textArea.getText().length() < 1)
    {
        setTitle("Untitled-" +programName);
        textArea.setText("");
        textChanged=false;
    }
    else if(!textChanged) {
        setTitle("Untitled-" +programName);
        textArea.setText("");
        textChanged=false; 
    }
    else{
        int confirm = JOptionPane.showConfirmDialog(null,"Do you want to save before exiting this program");
        if (confirm==JOptionPane.YES_OPTION)
        {
         if("".equals(fileName)){
             saveAs();
             }
         else{
             save(fileName);
         }
         setTitle(programName);
         fileName="";
         textArea.setText("");
         textChanged=false;
        }
        else if (confirm== JOptionPane.NO_OPTION){
            setTitle(programName);
            textArea.setText("");
            textChanged=false;
            
         
         }
         
        }
        
    }
    }

